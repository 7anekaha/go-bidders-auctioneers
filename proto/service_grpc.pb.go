// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdService_Connect_FullMethodName        = "/AdService/Connect"
	AdService_ListenRequests_FullMethodName = "/AdService/ListenRequests"
	AdService_Bid_FullMethodName            = "/AdService/Bid"
)

// AdServiceClient is the client API for AdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdServiceClient interface {
	Connect(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ListenRequests(ctx context.Context, in *UserResponse, opts ...grpc.CallOption) (AdService_ListenRequestsClient, error)
	Bid(ctx context.Context, in *AdResponse, opts ...grpc.CallOption) (*AdStatus, error)
}

type adServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdServiceClient(cc grpc.ClientConnInterface) AdServiceClient {
	return &adServiceClient{cc}
}

func (c *adServiceClient) Connect(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AdService_Connect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adServiceClient) ListenRequests(ctx context.Context, in *UserResponse, opts ...grpc.CallOption) (AdService_ListenRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdService_ServiceDesc.Streams[0], AdService_ListenRequests_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adServiceListenRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdService_ListenRequestsClient interface {
	Recv() (*AdRequest, error)
	grpc.ClientStream
}

type adServiceListenRequestsClient struct {
	grpc.ClientStream
}

func (x *adServiceListenRequestsClient) Recv() (*AdRequest, error) {
	m := new(AdRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adServiceClient) Bid(ctx context.Context, in *AdResponse, opts ...grpc.CallOption) (*AdStatus, error) {
	out := new(AdStatus)
	err := c.cc.Invoke(ctx, AdService_Bid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdServiceServer is the server API for AdService service.
// All implementations must embed UnimplementedAdServiceServer
// for forward compatibility
type AdServiceServer interface {
	Connect(context.Context, *UserRequest) (*UserResponse, error)
	ListenRequests(*UserResponse, AdService_ListenRequestsServer) error
	Bid(context.Context, *AdResponse) (*AdStatus, error)
	mustEmbedUnimplementedAdServiceServer()
}

// UnimplementedAdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdServiceServer struct {
}

func (UnimplementedAdServiceServer) Connect(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAdServiceServer) ListenRequests(*UserResponse, AdService_ListenRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenRequests not implemented")
}
func (UnimplementedAdServiceServer) Bid(context.Context, *AdResponse) (*AdStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedAdServiceServer) mustEmbedUnimplementedAdServiceServer() {}

// UnsafeAdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdServiceServer will
// result in compilation errors.
type UnsafeAdServiceServer interface {
	mustEmbedUnimplementedAdServiceServer()
}

func RegisterAdServiceServer(s grpc.ServiceRegistrar, srv AdServiceServer) {
	s.RegisterService(&AdService_ServiceDesc, srv)
}

func _AdService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).Connect(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdService_ListenRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserResponse)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdServiceServer).ListenRequests(m, &adServiceListenRequestsServer{stream})
}

type AdService_ListenRequestsServer interface {
	Send(*AdRequest) error
	grpc.ServerStream
}

type adServiceListenRequestsServer struct {
	grpc.ServerStream
}

func (x *adServiceListenRequestsServer) Send(m *AdRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _AdService_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServiceServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdService_Bid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServiceServer).Bid(ctx, req.(*AdResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// AdService_ServiceDesc is the grpc.ServiceDesc for AdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdService",
	HandlerType: (*AdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _AdService_Connect_Handler,
		},
		{
			MethodName: "Bid",
			Handler:    _AdService_Bid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenRequests",
			Handler:       _AdService_ListenRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
